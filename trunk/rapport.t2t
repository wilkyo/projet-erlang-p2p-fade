Rapport Projet Erlang de Peer en Peer [Groupe fade]
Vincent FAUVEAU, Willy FRANÇOIS, Zo RABARIJAONA
%%mtime(%d/%m/%Y)
%!target: xhtml
%!outfile: rapport.html
%!encoding: UTF-8
%!postproc(xhtml): @br@ <br />

=  Introduction  =


=  Jalon 1  =

== Création du cercle ==

Le fichier ring.erl permet la création de l'anneau pour exécuter chord.

- La fonction launch/3 :

Cette fonction prend 3 paramètres en entrée: Mod, Fun, Names.
Mod et Fun correspondent au module et à la fonction de ce module à appeler.
Names est une liste d'atomes erlang pour nommer les noeuds de l'anneau (alice, eve...).
Elle commence par créer le logger et l'enregistrer sous l'atôme logger.
Ensuite, elle prépare les noeuds pour la création de l'anneau:
À un atome, elle associe son noeud erlang (obtenu à l'aide de node/0) et le tout est haché en sha1.
Un couple de ce hachage et de l'association précédente est fait.
La liste obtenue est ensuite triée en fonction du hachage obtenu et la fonction build/3 est appelée.
Pour finir, on prépare la liste pour l'interface Java à l'aide de la fonction prepare/1 et on lui envoie à l'adresse {mbox, gui@localhost}.

- La fonction prepare/1 :

Cette fonction prend la liste précédemment triée en paramètre et décode les identifiants hachés en entiers non signés afin que l'interface Java puisse les traiter plus facilement.

- La fonction build/3 :

Cette fonction reprend les 2 premiers paramètres de launch et la liste de noeuds triée en fonction de l'identifiant haché.
Elle exécute un parcourt récursif qui crée un processus sur la fonction init/3 et lui envoie comme message {next, NoeudSuivant}.
Le noeud suivant s'obtient par appel récursif sur build_aux/4 (qui garde le premier noeud du cercle pour le donner en suivant du dernier) qui retourne le noeud qu'il est en train de créer.

- La fonction init/3 :

Cette fonction est appelée par les processus de l'anneau à leur création.
Ses deux premiers paramètres sont les mêmes que les deux premiers de launch et build.
Elle se contente de créer la table de hachage du noeud et de recevoir son noeud suivant afin de pouvoir lancer la fonction du module passé en paramètre.
Cette fonction est évidemment chord du module chord.
Des messages sont envoyés au logger pendant cette fonction.


== Chord ==

Le fichier chord.erl permet principalement la gestion des fonctions lookup/3, get/4 et put/5, par le biais de chord/3.

- La fonction lookup/3 : 

 Cette fonction prend en entrée 3 paramètres : NodeId, NextId et Key.
 NodeId identifie le noeud courant, au sens chord du terme, et NextId son noeud suivant.
 Key correspond à la clé hachée que l'on cherche.
 Lookup vérifie si la clé se situe entre l'identifiant (haché) courant et l'identifiant (haché) suivant.
 Si tel est bien le cas, lookup retourne le processus suivant, sinon elle envoie un message qui fera exécuter de nouveau lookup sur le suivant.

- La fonction get/4 :

 Cette fonction prend en entrée 4 paramètres : NodeId, HashTable, NextId et Key.
 Les arguments NodeId, NextId et Key correspondent à ceux de la fonction lookup. HashTable quand à elle désigne la table de hachage dans laquelle on va prendre la donnée.
 La méthode cherche pour un noeud NodeId si le noeud renvoyé par lookup correspond a celui-ci.
 Si c'est le cas, elle récupère la donnée dans sa table de hachage, sinon elle envoie un message au processus retourné par lookup pour lui demander la donnée (par le bias de la fonction getself/2).

- La fonction put/5 :

 Cette fonction prend en entrée 5 paramètres : NodeId, HashTable, NextId, Key et Data.
 Les arguments NodeId, HashTable, NextId et Key ont le même rôle que ceux de la fonction get.
 Le paramètre Data correspond à la donnée que l'on veut mettre dans la table de hachage.
 La méthode fonctionne comme get : on utilise lookup pour chercher le noeud à qui on va confier la donnée, puis on enregistre la donnée dans sa table de hashage (avec la fonction auxiliaire putself/3).

- La fonction chord/3 :

 C'est la fonction principale de chord.erl.
 Elle permet de recevoir les messages lookup, get et put et d'agir en conséquence.
 Elle prend en paramètres les 3 données qui définissent un processus : NodeId (le noeud en question), HashTable (sa table de hachage) et NextId (le noeud suivant).
 Suivant le message qu'elle recoit, elle appelle soit lookup, get ou put.


== Journalisation ==

La journalisation consiste en l'édition de fichiers de logs : A chaque fois qu'une fonction est appelée, une description de l'action est écrite dans un fichier de log.
Ce fichier porte comme nom la date et l'heure (heure(s), minute(s), seconde(s)) de l'exécution du programme afin d'avoir à chaque fois un fichier différent. 

- Fonctionnement :

Un processus "logger" est créé lors de la création de l'anneau.
Lorsqu'une action est effectuée, le processus courant envoie un message à "logger" indiquant les détails de l'action.
Les messages envoyés à logger sont traités dans la fonction wait/1 du fichier logger.erl.
C'est dans cette fonction que l'on écrit les informations dans le fichier ``Filename`` (donné en entrée), par rapport au message envoyé.


== Interface graphique ==



= Conclusion =


